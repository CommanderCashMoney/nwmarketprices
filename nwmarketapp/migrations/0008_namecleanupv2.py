# Generated by Django 4.0.1 on 2022-03-31 21:11
import json
import logging
from pathlib import Path

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion


def migrate_name_map(apps, schema_editor):
    NameCleanupV2 = apps.get_model("nwmarketapp", "NameMap")  # noqa
    NameCleanupV1 = apps.get_model("nwmarketapp", "NameCleanup")  # noqa
    ConfirmedNames = apps.get_model("nwmarketapp", "ConfirmedNames")  # noqa

    all_confirmed_names_qs = ConfirmedNames.objects.all().values("name", "id")
    all_confirmed_names = {
        obj["name"]: obj["id"]
        for obj in all_confirmed_names_qs
    }
    for obj in NameCleanupV1.objects.exclude(bad_word__isnull=True):
        if obj.good_word in all_confirmed_names:
            NameCleanupV2(
                bad_name=obj.bad_word,
                correct_item_id=all_confirmed_names[obj.good_word],
                number_times_seen=1
            ).save()


def migrate_name_cleanups(apps, schema_editor):
    NameCleanup = apps.get_model("nwmarketapp", "NameCleanup")  # noqa
    User = apps.get_model("auth", "User")  # noqa

    for obj in NameCleanup.objects.all():
        bad_string = obj.bad_word
        if not bad_string or bad_string.replace(" ", "") == "" or not obj.good_word:
            obj.delete()
            continue
        bad_words = bad_string.split(" ")
        if len(bad_words) != 1:
            obj.delete()
            continue
        bad_word = bad_words[0]
        obj.bad_word = bad_word
        obj.user = User.objects.get(username=obj.username)
        obj.save()


def migrate_new_nwdb_ids(apps, schema_editor):
    ConfirmedNames = apps.get_model("nwmarketapp", "ConfirmedNames")  # noqa
    nwdb_data_file = Path(settings.BASE_DIR) / "nwmarketapp" / "data" / "nwdb_20220401.json"
    with nwdb_data_file.open("r") as f:
        nwdb_data = json.load(f)

    nwdb_data_map = {item["nwdb_id"]: item["name"] for item in nwdb_data}
    cn_matches = ConfirmedNames.objects.filter(nwdb_id__in=[item["nwdb_id"] for item in nwdb_data])
    to_remove = set()
    for match in cn_matches:
        try:
            real_name = nwdb_data_map[match.nwdb_id]
        except KeyError:
            print(match.nwdb_id)
            raise
        if match.name != real_name:
            match.name = real_name
            match.save()  # checked, there are very few and they are all sensible.
        to_remove.add(match.nwdb_id)

    for key in to_remove:
        nwdb_data_map.pop(key)

    for nwdb_id, name in nwdb_data_map.items():
        ConfirmedNames(name=name, nwdb_id=nwdb_id, username="nwdb").save()


def backwards(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('nwmarketapp', '0007_run_tz_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='NameMap',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('bad_name', models.TextField(editable=False)),
                ('number_times_seen', models.IntegerField(editable=False)),
                ('correct_item', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='nwmarketapp.confirmednames')),
                ('user_corrected', models.ForeignKey(null=True, on_delete=django.db.models.deletion.PROTECT, related_name='user_corrected', to=settings.AUTH_USER_MODEL)),
                ('user_submitted', models.ForeignKey(default=3, on_delete=django.db.models.deletion.PROTECT, related_name='user_submitted', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Name Mapping',
                'verbose_name_plural': 'Name Mappings',
                'db_table': 'name_map',
            },
        ),
        migrations.RunPython(migrate_name_map, backwards),
        migrations.RemoveField(
            model_name='namecleanup',
            name='approved',
        ),
        migrations.RemoveField(
            model_name='namecleanup',
            name='timestamp',
        ),
        migrations.AddField(
            model_name='namecleanup',
            name='user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL,
                                    to=settings.AUTH_USER_MODEL),
        ),
        migrations.RunPython(migrate_name_map, backwards),
        migrations.RunPython(migrate_name_cleanups, backwards),
        migrations.AlterField(
            model_name='namecleanup',
            name='bad_word',
            field=models.CharField(default=None, max_length=150),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='namecleanup',
            name='good_word',
            field=models.CharField(default=None, max_length=150),
            preserve_default=False,
        ),
        migrations.AlterField(
            model_name='namecleanup',
            name='id',
            field=models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID'),
        ),
        migrations.RemoveField(
            model_name='namecleanup',
            name='username',
        ),
        migrations.RunPython(migrate_new_nwdb_ids, backwards),
        migrations.AlterModelOptions(
            name='namecleanup',
            options={'verbose_name': 'Word Map', 'verbose_name_plural': 'Word Mappings'},
        ),
        migrations.AlterField(
            model_name='namecleanup',
            name='bad_word',
            field=models.CharField(max_length=150, unique=True),
        ),
    ]
